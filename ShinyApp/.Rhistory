dim(training); dim(testing)
modelFit<-train(case~.,method="rpart",data=training)
modelFit<-train(Case~.,method="rpart",data=training)
data<-segmentationOriginal
inTrain <-data$Case=="Train"
training = data[ inTrain,]
testing = data[-inTrain,]
colnames(segmentationOriginal)
summary(data)
set.seed(125)
modelFit<-train(Class~.,method="rpart",data=training)
modelFit$finalModel
text(modelFit$finalModel,cex=0.8)
plot(modelFit$finalModel,uniform=T)
text(modelFit$finalModel,cex=0.8)
plot(modelFit$finalModel,uniform=T)
text(modelFit$finalModel,cex=1.0)
plot(modelFit$finalModel,uniform=T)
text(modelFit$finalModel,cex=2.0)
plot(modelFit$finalModel,uniform=T)
text(modelFit$finalModel,cex=4.0)
plot(modelFit$finalModel,uniform=T)
text(modelFit$finalModel,cex=3.0)
plot(modelFit$finalModel,uniform=T)
text(modelFit$finalModel,cex=2.5)
plot(modelFit$finalModel,uniform=T)
text(modelFit$finalModel,cex=2.0)
print(modelFit$finalModel)
install.packages("rattle")
library(ISLR)
install.packages("ISLR")
library(ISLR)
data(Wage)
colnames(Wage)
library(ggplot2)
library(caret)
Wage<-subset(Wage,select=-c(logwage))
colnames(Wage)
inTrain<-createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training<-Wage[inTrain,]
testing<-Wage[-inTrain,]
modelFit<-train(wage~.,method="gbm", data=training,verbose=FALSE)
install.packages("gbm")
modelFit<-train(wage~.,method="gbm", data=training,verbose=FALSE)
modelFit<-train(wage~.,method="gbm", data=training,verbose=FALSE)
modelFit
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
summary(newdata)
str(newdata)
dim(newdata)
data(olive)
olive = olive[,-1]
dim(olive)  # 1 9
summary(olive)
str(olive)
fitTree<- train(Area~.,data=olive, method="rpart")
fitTree<- train(Area~.,data=olive, method="rpart2")
fitTree
newdata = as.data.frame(t(colMeans(olive)))
predict(fitTree,newdata)
library(rpart)
fitTree<- train(Area~.,data=olive, method="rpart")
fitTree<- tree(Area~.,data=olive)
install.packages("tree")
library(tree)
fitTree<- train(Area~.,method="tree",data=olive)
fitTree<- tree(Area~.,data=olive)
fitTree
predict(fitTree,newdata)
a
fitTree<- tree(Area~.,method = "recursive.partition",data=olive)
predict(fitTree,newdata)
fitTree
fitTree<- train(Area~.,method = "rpart",data=olive)
predict(fitTree,newdata)
ibrary(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
colnames(SAheart)
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tabacco+typea+ldl,method="glm",
family="binomial")
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tabacco+typea+ldl,method="glm",
family="binomial", data=trainSA)
colnames(trainSA)
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",
family="binomial", data=trainSA)
str(SAheart)
SAheart$chd<- as.factor(as.character(SAheart$chd))
str(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",
family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modelFit,trainSA))
str(trainSA)
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",
family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modelFit,trainSA))
missClass(testSA$chd,predict(modelFit,testSA))
data(SAheart)
str(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",
family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modelFit,trainSA))
missClass(testSA$chd,predict(modelFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(data(vowel.train))
str(vowel.train)
vowel.train$y<- as.factor(as.character(vowel.train$y))
vowel.test$y<- as.factor(as.character(vowel.test$y))
modelFit<-train(y~.,data=vowel.train,method="rf")
varImp(modelFit)
varImp(modelFit,vowel.test)
predict(modelFit,vowel.test)
varImp(modelFit,vowel.test)
varImp(modelFit)
set.seed(33833)
modelFit<-train(y~.,data=vowel.train,method="rf")
set.seed(33833)
modelFit<-train(y~.,data=vowel.train,method="rf")
varImp(modelFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(as.character(vowel.train$y))
vowel.test$y<- as.factor(as.character(vowel.test$y))
set.seed(33833)
modelFit<-train(y~.,data=vowel.train,method="rf")
varImp(modelFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(as.character(vowel.train$y))
vowel.test$y<- as.factor(as.character(vowel.test$y))
set.seed(33833)
modelFit<-train(y~.,data=vowel.train,method="rf")
modelFit2<train(y~.,data=vowel.train,method="gbm")
modelFit<-train(y~.,data=vowel.train,method="rf")
modelFit2<train(y~.,data=vowel.train,method="gbm")
modelFit2<train(y~.,data=vowel.train,method="gbm",verbose=FALSE)
predict(modelFit,vowel.test)
modelFit
predModelFit<-predict(modelFit,vowel.test)
predModelFit2<-predict(modelFit2,vowel.test)
predModelFit2<-predict(modelFit2,vowel.test)
library(gbm)
modelFit2<train(y~.,data=vowel.train,method="gbm",verbose=FALSE)
str(vowel.test)
str(vowel.train)
predModelFit<-predict(modelFit,vowel.test)
predModelFit
confusionMatrix(predModelFit,vowel.test$y)
modelFit2
confusionMatrix(predModelFit2,vowel.test$y)
predModelFit2<-predict(modelFit2,vowel.test)
predModelFit2
confusionMatrix(predModelFit,vowel.test$y)$overall[1]
confusionMatrix(predModelFit,vowel.test$y)$overall['Accuracy']
set.seed(33833)
modelFit2<train(y~.,data=vowel.train,method="gbm",verbose=FALSE)
modelFit2
predModelFit2<-predict(modelFit2,vowel.test)
confusionMatrix(predModelFit2,vowel.test$y)
predModelFit2
modelFit2<-train(y~.,method="gbm", data=vowel.train,verbose=FALSE)
predModelFit2<-predict(modelFit2,vowel.test)
confusionMatrix(predModelFit2,vowel.test$yoverall['Accuracy'])
confusionMatrix(predModelFit2,vowel.test$y$overall['Accuracy'])
confusionMatrix(predModelFit2,vowel.test$y)$overall['Accuracy'])
confusionMatrix(predModelFit2,vowel.test$y)$overall['Accuracy']
confusionMatrix(predModelFit,vowel.test$y)$overall['Accuracy']
Aggree<-predModelFit==predModelFit2
confusionMatrix(vowel.test$y[Aggree],predModelFit[Aggree])$overall['Accuracy']
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfModel<-train(diagnosis~., data=training,method="rf")
gbmModel<-train(diagnosis~., data=training,method="gbm",verbose=FALSE)
ldaModel<-train(diagnosis~., data=training,method="lda")
gbmPred<-predict(gbmModel,testing)
ldaPred<-predict(ldaModel,testing)
rfPred<-predict(rfModel,testing)
combinedPred<-data.frame(rfPred,gbmPred,ldaPred,diagnosis=testing$diagnosis)
combinedModel<-train(diagnosis~., data=combinedPred,method="rf")
combinedPred<-predict(combinedModel, testing)
confusionMatrix(testing$diagnosis,rfPred)$overall["Accuracy"]
confusionMatrix(testing$diagnosis,gbmPred)$overall["Accuracy"]
confusionMatrix(testing$diagnosis,ldaPred)$overall["Accuracy"]
confusionMatrix(testing$diagnosis,combinedPred)$overall["Accuracy"]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(concrete)
fitModel<-train(CompressiveStrength~., data=training, method="lasso")
fitModel
plot.enet(fitModel)
plot.enet(fitModel$finalModel,xvar="penalty",use.color = TRUE)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
install.packages("lubridate")
install.packages("devtools")
library(devtools)
install.packages("Rtools")
library(Rtools)
find_rtools(rtools)
find_rtools()
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
install.packages("slidify", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install_github('slidify','ramnathv')
install_github("ramnathv/slidify")
install_github('slidifyLibraries','ramnathv')
install_github('ramnathv/slidifyLibraries')
library(slidify)
library(ramnathv/slidify)
library(slidify)
install.packages("stringr")
install.packages("stringr")
library(slidify)
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/shinyapp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
installed.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(devtools)
devtools::install_github('rstudio/shinyapps')
installed.packages("RCurl")
installed.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
library("RCurl")
install.packages("devtools")
install.packages('devtools')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/rsconnect')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
values <- data[,2]
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimes
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
states_map <- map_data("state")
colnames(states_map)
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
facet_wrap( ~ variable) + theme_dpi_map2()
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
require(reshape) # for melt
crimesm <- melt(crimes, id = 1)
# No DPI theme
states_map <- map_data("state")
ggplot(crimes, aes(map_id = state)) + geom_map(aes(fill = Murder), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat)+ labs(title="USA Crime")
# Draw map
last_plot() + coord_map()
# DPI theme
ggplot(crimesm, aes(map_id = state)) + geom_map(aes(fill = value), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) +
facet_wrap( ~ variable) + theme_dpi_map2()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
states_map <- map_data("state")
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
states_map <- map_data("state")
library(datasets)
library(maps)
states_map <- map_data("state")
install.packages("maps")
install.packages("maps")
library(maps)
states_map <- map_data("state")
library(shiny)
states_map <- map_data("state")
library(mapdata)
states_map <- map_data("state")
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
states_map <- map_data("state")
snames <- aggregate(cbind(long, lat) ~ region, data=states_map,
FUN=function(x) mean(range(x)))
sabb<-state.abb
sabb
drop <-c("AK","HI")
sabb <-sabb[ - which(sabb %in% drop)]
sabb
snames
sabb<- append(sabb,"DC",7)
sabb
snames <-cbind(snames,sabb)
snames
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
news(package="maps")
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
sessionInfo()
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
shiny::runApp('Data Products Class/DPClassAssignment/ShinyApp')
install.packages("maps")
shiny::runApp()
shiny::runApp()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
print(gg) +coord_map()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
library(maps)
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
source('~/Data Products Class/DPClassAssignment/ShinyApp/stateRateMap.R')
shiny::runApp()
library(ggmap)
install.packages(ggmap)
install.packages("ggmap")
library(ggmap)
shiny::runApp()
